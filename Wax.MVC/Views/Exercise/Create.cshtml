<h1>新增運動項目</h1>

<v-form ref="form" v-model="valid" v-on:submit.prevent="submitForm">
    <v-container>
        <v-row>
            <v-col>
                <v-text-field v-model="form.name" :rules="nameRules" label="項目名稱" required></v-text-field>
            </v-col>
        </v-row>
        <v-row>
            <v-col>
                <v-textarea v-model="form.description" label="簡短介紹"></v-textarea>
            </v-col>
        </v-row>
        <v-row>
            <v-col>
                <v-exercise-tag-combobox v-model="form.tags" v-model:exercise-tag-items="exerciseTagItems" :category-items="tagCategoryItems" :rules="tagsRules" label="標籤"></v-exercise-tag-combobox>
            </v-col>
        </v-row>
        <v-row>
            <v-col>
                <v-exercise-field-schemas-editor ref="schemasEditor" v-model="form.fieldSchemas" :data-type-items="exerciseFieldTypeItems" :rules="fieldSchemasRules"></v-exercise-field-schemas-editor>
            </v-col>
        </v-row>
        <v-row>
            <v-col class="text-center">
                <v-btn color="primary" large rounded v-on:click="submitForm">儲存</v-btn>
            </v-col>
        </v-row>
    </v-container>
</v-form>

@section Scripts {
    <script src="~/js/components/exerciseTagCombobox.js" asp-append-version="true"></script>
    <script src="~/js/components/exerciseFieldSchemasEditor.js" asp-append-version="true"></script>

    <script>
        const mainApp = createApp({
            components: {
                "v-exercise-tag-combobox": exerciseTagCombobox,
                'v-exercise-field-schemas-editor': exerciseFieldSchemasEditor,
            },
            data() {
                return {
                    valid: false,
                    form: {
                        name: '',
                        description: '',
                        tags: [],
                        fieldSchemas: [],
                    },
                    nameRules: [validateRule.lengthRequiredRule],
                    tagsRules: [validateRule.lengthRequiredRule],
                    fieldSchemasRules: [validateRule.lengthRequiredRule],
                    exerciseTagItems: [],
                    tagCategoryItems: [],
                    exerciseFieldTypeItems: [],
                }
            },
            created() {
                axios.get('@Url.Api("ExerciseTag")')
                    .then(response => this.exerciseTagItems = response.data)
                    .catch(ex => console.error(ex))
                axios.get('@Url.Api("ExerciseTagCategory")')
                    .then(response => this.tagCategoryItems = response.data)
                    .catch(ex => console.error(ex))
                axios.get('@Url.Api("ExerciseFieldType")')
                    .then(response => this.exerciseFieldTypeItems = response.data)
                    .catch(ex => console.error(ex))
            },
            methods: {
                async submitForm() {
                    const vuetifyValidResult = await this.$refs.form.validate()
                    const schemasValidResult = await this.$refs.schemasEditor.validate()
                    if (!vuetifyValidResult.valid || !schemasValidResult.valid) {
                        return
                    }

                    try {
                        let response = await axios.post('@Url.Api("Exercise")', this.form);
                        alert("成功");
                    } catch (error) {
                        alert(error);
                    }
                },
            },
        }).use(vuetify).mount('#main')
    </script>
}
